/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.itson.bdavanzadas.banco;

import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.itson.bdavanzadas.bancodominio.Cliente;
import org.itson.bdavanzadas.bancodominio.Transaccion;
import org.itson.bdavanzadas.bancopersistencia.dao.IClientesDAO;
import org.itson.bdavanzadas.bancopersistencia.excepciones.PersistenciaException;

/**
 *
 * @author castr
 */
public class HistorialOperacionesForm extends javax.swing.JFrame {

    private final IClientesDAO clientesDAO;
    Cliente cliente ;
    long numCuentaSeleccionado;
    static final Logger logger = Logger.getLogger(HistorialOperacionesForm.class.getName());
    Date fechaInicio, fechaFin;
    private JDateChooser calendarioInicio, calendarioFin;

    /**
     * Creates new form HistorialOperacionesForm
     */
    public HistorialOperacionesForm(IClientesDAO clientesDAO, long numCuentaSeleccionado, Cliente cliente) {
        initComponents();
        this.numCuentaSeleccionado = numCuentaSeleccionado;
        this.clientesDAO = clientesDAO;
        this.cliente = cliente ;
        this.fechaInicio = new Date(new GregorianCalendar(2024, Calendar.JANUARY, 1).getTimeInMillis());
        this.fechaFin = new Date(new GregorianCalendar().getTimeInMillis());
//        this.numCuentaCliente = numCuentaCliente;
        llenarTabla(fechaInicio, fechaFin);
        crearDateChooser();
    }



    public void limitarCalendario(JDateChooser dateChooser) {
        LocalDate fechaActual = LocalDate.now();

        // Calcular la fecha mínima (hace 120 años desde la fecha actual)
        LocalDate fechaMinima = fechaActual.minusYears(1);
        Date fechaMinimaSQL = Date.valueOf(fechaMinima);

        // Calcular la fecha máxima (hace 18 años desde la fecha actual)
        LocalDate fechaMaxima = fechaActual;
        Date fechaMaximaSQL = Date.valueOf(fechaMaxima);

        // Establecer el rango de fechas seleccionables
        dateChooser.setSelectableDateRange(fechaMinimaSQL, fechaMaximaSQL);

    }

    private void crearDateChooser() {
        calendarioInicio = new JDateChooser();
        calendarioInicio.setBounds(74, 94, 142, 26);
        calendarioFin = new JDateChooser() ;
        calendarioFin.setBounds(282, 94, 142, 26);
        // Agregar el JDateChooser al contenedor
        add(calendarioInicio);
        add(calendarioFin);
    }

    private void llenarTabla(Date fechaInicio, Date fechaFin) {
        // Obtener la lista de transacciones
        List<Transaccion> listaHistorialOperaciones;
        
        try {
            listaHistorialOperaciones = clientesDAO.obtenerHistorialOperaciones(numCuentaSeleccionado, fechaInicio, fechaFin);
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID Transacción");
            modelo.addColumn("Número de Cuenta Cliente");
            modelo.addColumn("Fecha");
            modelo.addColumn("Monto");
            modelo.addColumn("Estado");

//            // Ordenar la lista de transacciones por fecha de manera descendente (de la más reciente a la más antigua)
//            Collections.sort(listaHistorialOperaciones, Comparator.comparing(Transaccion::getFecha).reversed());

            // Agregar las transacciones al modelo de la tabla
            for (Transaccion transaccion : listaHistorialOperaciones) {
                Object[] fila = {
                    transaccion.getId(),
                    transaccion.getNumCuentaCliente(),
                    transaccion.getFecha(),
                    transaccion.getMonto(),
                    transaccion.getEstado()
                };
                modelo.addRow(fila);
            }

            // Configurar el modelo en la tabla
            jtblHistorialOperaciones.setModel(modelo);

        } catch (PersistenciaException e) {
            logger.log(Level.SEVERE, "Error al momento de la creación de la tabla", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtblHistorialOperaciones = new javax.swing.JTable();
        btnRefrescarTabla = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Historial de Operaciones");
        setResizable(false);

        jtblHistorialOperaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblHistorialOperaciones);

        btnRefrescarTabla.setText("Refrescar");
        btnRefrescarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarTablaActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha Inicio:");

        jLabel2.setText("Fecha Fin:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(btnVolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRefrescarTabla)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(118, 118, 118))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefrescarTabla)
                    .addComponent(btnVolver))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefrescarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarTablaActionPerformed
        try {
            if(!(calendarioInicio.getDate() == null || calendarioFin.getDate() == null)) {
                Date fechaCalendarInicio = new java.sql.Date(calendarioInicio.getDate().getTime()) ;
                Date fechaCalendarFin = new java.sql.Date(calendarioFin.getDate().getTime()) ;
            
                clientesDAO.obtenerHistorialOperaciones(numCuentaSeleccionado, fechaCalendarInicio, fechaCalendarFin) ;
                llenarTabla(fechaCalendarInicio, fechaCalendarFin) ;
            } else {
                JOptionPane.showMessageDialog(this, "Hay campos vacios", "Campos Vacios", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (PersistenciaException ex) {
            logger.log(Level.SEVERE, "Error al momento de refrescar la tabla", ex);
        }
        
    }//GEN-LAST:event_btnRefrescarTablaActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        System.out.println("Y:" + btnVolver.getY());
        System.out.println("X:" + btnVolver.getX());
        dispose() ;
        MenuPrincipalForm menu = new MenuPrincipalForm(clientesDAO, cliente) ;
        menu.setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(HistorialOperacionesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(HistorialOperacionesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(HistorialOperacionesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(HistorialOperacionesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new HistorialOperacionesForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefrescarTabla;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtblHistorialOperaciones;
    // End of variables declaration//GEN-END:variables
}
